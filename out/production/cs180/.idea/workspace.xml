<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="a4139c7e-f2dc-4b29-8aa6-7463ba475be5" name="Changes" comment="import org.junit.Before;&#10;import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class UserTest {&#10;    private User user;&#10;    private ArrayList&lt;User&gt; friends;&#10;    private ArrayList&lt;User&gt; blocked;&#10;&#10;    @Before&#10;    public void setUp() {&#10;        friends = new ArrayList&lt;&gt;();&#10;        blocked = new ArrayList&lt;&gt;();&#10;        user = new User(&quot;John&quot;, &quot;Doe&quot;, &quot;password123&quot;, &quot;johndoe&quot;, &quot;photo123&quot;, friends, blocked);&#10;    }&#10;&#10;    @Test&#10;    public void testGettersAndSetters() {&#10;        // Test all getters&#10;        assertEquals(&quot;John&quot;, user.getFirstName());&#10;        assertEquals(&quot;Doe&quot;, user.getLastName());&#10;        assertEquals(&quot;password123&quot;, user.getPassword());&#10;        assertEquals(&quot;johndoe&quot;, user.getUsername());&#10;        assertEquals(&quot;photo123&quot;, user.getPhotoId());&#10;        assertTrue(user.getFriendList().isEmpty());&#10;        assertTrue(user.getBlockList().isEmpty());&#10;&#10;        // Test all setters&#10;        user.setFirstName(&quot;Jane&quot;);&#10;        assertEquals(&quot;Jane&quot;, user.getFirstName());&#10;&#10;        user.setLastName(&quot;Smith&quot;);&#10;        assertEquals(&quot;Smith&quot;, user.getLastName());&#10;&#10;        user.setPassword(&quot;newpassword&quot;);&#10;        assertEquals(&quot;newpassword&quot;, user.getPassword());&#10;&#10;        user.setUsername(&quot;janesmith&quot;);&#10;        assertEquals(&quot;janesmith&quot;, user.getUsername());&#10;&#10;        user.setPhotoId(&quot;photo456&quot;);&#10;        assertEquals(&quot;photo456&quot;, user.getPhotoId());&#10;&#10;        // Create test users to add to friends and blocked lists&#10;        User friend = new User(&quot;Friend&quot;, &quot;User&quot;, &quot;friendpass&quot;, &quot;frienduser&quot;, &quot;friendphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        User blockedUser = new User(&quot;Blocked&quot;, &quot;User&quot;, &quot;blockedpass&quot;, &quot;blockeduser&quot;, &quot;blockedphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        ArrayList&lt;User&gt; newFriends = new ArrayList&lt;&gt;();&#10;        newFriends.add(friend);&#10;        user.setFriendList(newFriends);&#10;        assertEquals(1, user.getFriendList().size());&#10;        assertEquals(friend, user.getFriendList().get(0));&#10;&#10;        ArrayList&lt;User&gt; newBlocked = new ArrayList&lt;&gt;();&#10;        newBlocked.add(blockedUser);&#10;        user.setBlockList(newBlocked);&#10;        assertEquals(1, user.getBlockList().size());&#10;        assertEquals(blockedUser, user.getBlockList().get(0));&#10;    }&#10;&#10;    @Test&#10;    public void testToString() {&#10;        String expectedString = &quot;John,Doe,johndoe,password123&quot;;&#10;        assertEquals(expectedString, user.toString());&#10;    }&#10;}" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2eNesczqZBOweYhkAadxBSzoZCL" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Downloaded.Files.Path.Enabled": "false",
    "JUnit.SocialMediaChatServiceTest.executor": "Run",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="jdk-21.0.1-openjdk-21.0.1-f644763e9732-f98dd351" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="a4139c7e-f2dc-4b29-8aa6-7463ba475be5" name="Changes" comment="" />
      <created>1711749670895</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1711749670895</updated>
      <workItem from="1711749673174" duration="1326000" />
      <workItem from="1711760378280" duration="1103000" />
      <workItem from="1711761964938" duration="949000" />
      <workItem from="1711763270734" duration="2769000" />
    </task>
    <task id="LOCAL-00001" summary="import org.junit.Before;&#10;import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class UserTest {&#10;    private User user;&#10;    private ArrayList&lt;User&gt; friends;&#10;    private ArrayList&lt;User&gt; blocked;&#10;&#10;    @Before&#10;    public void setUp() {&#10;        friends = new ArrayList&lt;&gt;();&#10;        blocked = new ArrayList&lt;&gt;();&#10;        user = new User(&quot;John&quot;, &quot;Doe&quot;, &quot;password123&quot;, &quot;johndoe&quot;, &quot;photo123&quot;, friends, blocked);&#10;    }&#10;&#10;    @Test&#10;    public void testGettersAndSetters() {&#10;        // Test all getters&#10;        assertEquals(&quot;John&quot;, user.getFirstName());&#10;        assertEquals(&quot;Doe&quot;, user.getLastName());&#10;        assertEquals(&quot;password123&quot;, user.getPassword());&#10;        assertEquals(&quot;johndoe&quot;, user.getUsername());&#10;        assertEquals(&quot;photo123&quot;, user.getPhotoId());&#10;        assertTrue(user.getFriendList().isEmpty());&#10;        assertTrue(user.getBlockList().isEmpty());&#10;&#10;        // Test all setters&#10;        user.setFirstName(&quot;Jane&quot;);&#10;        assertEquals(&quot;Jane&quot;, user.getFirstName());&#10;&#10;        user.setLastName(&quot;Smith&quot;);&#10;        assertEquals(&quot;Smith&quot;, user.getLastName());&#10;&#10;        user.setPassword(&quot;newpassword&quot;);&#10;        assertEquals(&quot;newpassword&quot;, user.getPassword());&#10;&#10;        user.setUsername(&quot;janesmith&quot;);&#10;        assertEquals(&quot;janesmith&quot;, user.getUsername());&#10;&#10;        user.setPhotoId(&quot;photo456&quot;);&#10;        assertEquals(&quot;photo456&quot;, user.getPhotoId());&#10;&#10;        // Create test users to add to friends and blocked lists&#10;        User friend = new User(&quot;Friend&quot;, &quot;User&quot;, &quot;friendpass&quot;, &quot;frienduser&quot;, &quot;friendphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        User blockedUser = new User(&quot;Blocked&quot;, &quot;User&quot;, &quot;blockedpass&quot;, &quot;blockeduser&quot;, &quot;blockedphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        ArrayList&lt;User&gt; newFriends = new ArrayList&lt;&gt;();&#10;        newFriends.add(friend);&#10;        user.setFriendList(newFriends);&#10;        assertEquals(1, user.getFriendList().size());&#10;        assertEquals(friend, user.getFriendList().get(0));&#10;&#10;        ArrayList&lt;User&gt; newBlocked = new ArrayList&lt;&gt;();&#10;        newBlocked.add(blockedUser);&#10;        user.setBlockList(newBlocked);&#10;        assertEquals(1, user.getBlockList().size());&#10;        assertEquals(blockedUser, user.getBlockList().get(0));&#10;    }&#10;&#10;    @Test&#10;    public void testToString() {&#10;        String expectedString = &quot;John,Doe,johndoe,password123&quot;;&#10;        assertEquals(expectedString, user.toString());&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1711810847635</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1711810847635</updated>
    </task>
    <option name="localTasksCounter" value="2" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="import org.junit.Before;&#10;import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class UserTest {&#10;    private User user;&#10;    private ArrayList&lt;User&gt; friends;&#10;    private ArrayList&lt;User&gt; blocked;&#10;&#10;    @Before&#10;    public void setUp() {&#10;        friends = new ArrayList&lt;&gt;();&#10;        blocked = new ArrayList&lt;&gt;();&#10;        user = new User(&quot;John&quot;, &quot;Doe&quot;, &quot;password123&quot;, &quot;johndoe&quot;, &quot;photo123&quot;, friends, blocked);&#10;    }&#10;&#10;    @Test&#10;    public void testGettersAndSetters() {&#10;        // Test all getters&#10;        assertEquals(&quot;John&quot;, user.getFirstName());&#10;        assertEquals(&quot;Doe&quot;, user.getLastName());&#10;        assertEquals(&quot;password123&quot;, user.getPassword());&#10;        assertEquals(&quot;johndoe&quot;, user.getUsername());&#10;        assertEquals(&quot;photo123&quot;, user.getPhotoId());&#10;        assertTrue(user.getFriendList().isEmpty());&#10;        assertTrue(user.getBlockList().isEmpty());&#10;&#10;        // Test all setters&#10;        user.setFirstName(&quot;Jane&quot;);&#10;        assertEquals(&quot;Jane&quot;, user.getFirstName());&#10;&#10;        user.setLastName(&quot;Smith&quot;);&#10;        assertEquals(&quot;Smith&quot;, user.getLastName());&#10;&#10;        user.setPassword(&quot;newpassword&quot;);&#10;        assertEquals(&quot;newpassword&quot;, user.getPassword());&#10;&#10;        user.setUsername(&quot;janesmith&quot;);&#10;        assertEquals(&quot;janesmith&quot;, user.getUsername());&#10;&#10;        user.setPhotoId(&quot;photo456&quot;);&#10;        assertEquals(&quot;photo456&quot;, user.getPhotoId());&#10;&#10;        // Create test users to add to friends and blocked lists&#10;        User friend = new User(&quot;Friend&quot;, &quot;User&quot;, &quot;friendpass&quot;, &quot;frienduser&quot;, &quot;friendphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        User blockedUser = new User(&quot;Blocked&quot;, &quot;User&quot;, &quot;blockedpass&quot;, &quot;blockeduser&quot;, &quot;blockedphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        ArrayList&lt;User&gt; newFriends = new ArrayList&lt;&gt;();&#10;        newFriends.add(friend);&#10;        user.setFriendList(newFriends);&#10;        assertEquals(1, user.getFriendList().size());&#10;        assertEquals(friend, user.getFriendList().get(0));&#10;&#10;        ArrayList&lt;User&gt; newBlocked = new ArrayList&lt;&gt;();&#10;        newBlocked.add(blockedUser);&#10;        user.setBlockList(newBlocked);&#10;        assertEquals(1, user.getBlockList().size());&#10;        assertEquals(blockedUser, user.getBlockList().get(0));&#10;    }&#10;&#10;    @Test&#10;    public void testToString() {&#10;        String expectedString = &quot;John,Doe,johndoe,password123&quot;;&#10;        assertEquals(expectedString, user.toString());&#10;    }&#10;}" />
    <option name="LAST_COMMIT_MESSAGE" value="import org.junit.Before;&#10;import org.junit.Test;&#10;import static org.junit.Assert.*;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class UserTest {&#10;    private User user;&#10;    private ArrayList&lt;User&gt; friends;&#10;    private ArrayList&lt;User&gt; blocked;&#10;&#10;    @Before&#10;    public void setUp() {&#10;        friends = new ArrayList&lt;&gt;();&#10;        blocked = new ArrayList&lt;&gt;();&#10;        user = new User(&quot;John&quot;, &quot;Doe&quot;, &quot;password123&quot;, &quot;johndoe&quot;, &quot;photo123&quot;, friends, blocked);&#10;    }&#10;&#10;    @Test&#10;    public void testGettersAndSetters() {&#10;        // Test all getters&#10;        assertEquals(&quot;John&quot;, user.getFirstName());&#10;        assertEquals(&quot;Doe&quot;, user.getLastName());&#10;        assertEquals(&quot;password123&quot;, user.getPassword());&#10;        assertEquals(&quot;johndoe&quot;, user.getUsername());&#10;        assertEquals(&quot;photo123&quot;, user.getPhotoId());&#10;        assertTrue(user.getFriendList().isEmpty());&#10;        assertTrue(user.getBlockList().isEmpty());&#10;&#10;        // Test all setters&#10;        user.setFirstName(&quot;Jane&quot;);&#10;        assertEquals(&quot;Jane&quot;, user.getFirstName());&#10;&#10;        user.setLastName(&quot;Smith&quot;);&#10;        assertEquals(&quot;Smith&quot;, user.getLastName());&#10;&#10;        user.setPassword(&quot;newpassword&quot;);&#10;        assertEquals(&quot;newpassword&quot;, user.getPassword());&#10;&#10;        user.setUsername(&quot;janesmith&quot;);&#10;        assertEquals(&quot;janesmith&quot;, user.getUsername());&#10;&#10;        user.setPhotoId(&quot;photo456&quot;);&#10;        assertEquals(&quot;photo456&quot;, user.getPhotoId());&#10;&#10;        // Create test users to add to friends and blocked lists&#10;        User friend = new User(&quot;Friend&quot;, &quot;User&quot;, &quot;friendpass&quot;, &quot;frienduser&quot;, &quot;friendphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        User blockedUser = new User(&quot;Blocked&quot;, &quot;User&quot;, &quot;blockedpass&quot;, &quot;blockeduser&quot;, &quot;blockedphoto&quot;, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;());&#10;        ArrayList&lt;User&gt; newFriends = new ArrayList&lt;&gt;();&#10;        newFriends.add(friend);&#10;        user.setFriendList(newFriends);&#10;        assertEquals(1, user.getFriendList().size());&#10;        assertEquals(friend, user.getFriendList().get(0));&#10;&#10;        ArrayList&lt;User&gt; newBlocked = new ArrayList&lt;&gt;();&#10;        newBlocked.add(blockedUser);&#10;        user.setBlockList(newBlocked);&#10;        assertEquals(1, user.getBlockList().size());&#10;        assertEquals(blockedUser, user.getBlockList().get(0));&#10;    }&#10;&#10;    @Test&#10;    public void testToString() {&#10;        String expectedString = &quot;John,Doe,johndoe,password123&quot;;&#10;        assertEquals(expectedString, user.toString());&#10;    }&#10;}" />
  </component>
</project>